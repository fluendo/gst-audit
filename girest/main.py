import argparse
import json

import gi
gi.require_version("GIRepository", "2.0")
from gi.repository import GIRepository
from apispec import APISpec

class GIRest():
    pointer_schema = {
        "oneOf": [
            {"type": "integer"},
            {"type": "string", "pattern": "^0x[0-9a-fA-F]+$|^[0-9]+$"}
        ],
    }

    def __init__(self, ns, ns_version):
        self.ns = ns
        self.ns_version = ns_version
        # To keep track of schemas already registered
        self.schemas = {}
        self.spec = APISpec(
            title=f"{ns} REST API",
            version=f"{ns_version}",
            openapi_version="3.0.2",
            info={
                "description": "API schema autogenerated by giREST"
            },
        )
        # Include the Pointer definition
        self.spec.components.schema("Pointer", GIRest.pointer_schema)
        # Load the corresponding Gir file
        self.repo = GIRepository.Repository()
        self.repo.require(ns, ns_version, 0)

    def _generate_function(self, bim, bi=None):
        api = f"/{bim.get_namespace()}"
        if bi:
            api += f"/{bi.get_name()}"
        if GIRepository.function_info_get_flags(bim) & 1:
            api += "/{self}"
        api += f"/{bim.get_name()}"
        # Handle the return value
        # Handle the parameters
        params = []
        if GIRepository.function_info_get_flags(bim) & 1:
            params.append({
               "name": "self",
               "in": "path",
               "required": True,
               "schema": {"$ref": f"#/components/schemas/{bi.get_namespace()}{bi.get_name()}"},
               "description": ""
            })
        # Add paths, components, etc. programmatically
        self.spec.path(path=api, operations={
            "get": {
                "summary": "",
                "description": "",
                "tags": [f"{bi.get_namespace()}{bi.get_name()}" if bi else ""],
                "parameters": params,
                "responses": {"200": {"description": "Success"}},
            }
        })

    def _generate_object(self, bi):
        # If we already registered that, skip it
        full_name = f"{bi.get_namespace()}{bi.get_name()}"
        if full_name in self.schemas:
            return
        # Generate the type for every parent
        parent = GIRepository.object_info_get_parent(bi)
        if parent:
            self._generate_object(parent)
            full_parent_name = f"{parent.get_namespace()}{parent.get_name()}"
            self.spec.components.schema(
                full_name,
                {
                    "allOf": [
                        {"$ref": f"#/components/schemas/{full_parent_name}"},
                        {
                            "type": "object",
                        }
                    ]
                }
           )
        else:
            self.spec.components.schema(
                full_name,
                {
                    "type": "object",
                    "properties": {
                        "ptr": {"$ref": "#/components/schemas/Pointer"},
                    },
                    "required": ["ptr"]
                }
            )
        # Now the member functions
        for i in range(0, GIRepository.object_info_get_n_methods(bi)):
            bim = GIRepository.object_info_get_method(bi, i)
            self._generate_function(bim, bi)
        # Mark it as generated
        self.schemas[full_name] = True

    def _generate_struct(self, bi):
        if GIRepository.struct_info_is_gtype_struct(bi):
            return
        # Structs with private fields can not be serialized
        # Structs with a constructor can not be serialized
        # Get free_function

    def generate(self):
        # Generate the types
        for i in range(0, self.repo.get_n_infos(self.ns)):
            info = self.repo.get_info(self.ns, i)
            info_type = info.get_type()
            if info_type == GIRepository.InfoType.OBJECT:
                self._generate_object(info)
            elif info_type == GIRepository.InfoType.STRUCT:
                self._generate_struct(info)
        return self.spec


def run():
    # Parse the args
    ns = "Gst"
    ns_version = "1.0"

    girest = GIRest(ns, ns_version)
    spec = girest.generate()
    # Export to dict (for JSON/YAML serialization)
    openapi_schema = spec.to_dict()
    print(json.dumps(openapi_schema, indent=2))


# FIXME remove this once launched through poetry
if __name__ == "__main__":
    run()

