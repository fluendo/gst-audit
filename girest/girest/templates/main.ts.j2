/**
 * {{ title }}
 * Version: {{ version }}
 * Auto-generated by girest-client-generator
 */

// Base types
export type Pointer = string;

// Configuration for API server location
let apiConfig = {
  host: '{{ host }}',
  port: {{ port }},
  get baseUrl(): string {
    return `http://${this.host}:${this.port}`;
  }
};

/**
 * Update the API server configuration
 * @param config New configuration with host and/or port
 */
export function setApiConfig(config: { host?: string; port?: number }): void {
  if (config.host !== undefined) {
    apiConfig.host = config.host;
  }
  if (config.port !== undefined) {
    apiConfig.port = config.port;
  }
  // Reinitialize callback EventSource with new URL
  if (typeof EventSource !== 'undefined' && (config.host !== undefined || config.port !== undefined)) {
    initializeCallbackSource();
  }
}

/**
 * Get the current API server configuration
 */
export function getApiConfig(): { host: string; port: number; baseUrl: string } {
  return {
    host: apiConfig.host,
    port: apiConfig.port,
    baseUrl: apiConfig.baseUrl
  };
}

// FinalizationRegistry for automatic cleanup of GObject instances
const objectRegistry = new FinalizationRegistry((ptr: string) => {
  fetch(apiConfig.baseUrl + '/GObject/Object/' + ptr + '/unref')
    .catch(err => console.error('Failed to unref object:', ptr, err));
});
{% if struct_registries %}

// FinalizationRegistry for automatic cleanup of struct instances
{% for registry in struct_registries %}
const {{ registry.name }} = new FinalizationRegistry((ptr: string) => {
  fetch(apiConfig.baseUrl + '{{ registry.path }}')
    .catch(err => console.error('Failed to free {{ registry.class_name }}:', ptr, err));
});
{% endfor %}
{% endif %}

// Callback dispatcher for handling callbacks from the server
const callbackDispatcher = new Map<string, Function>();

let callbackSource: EventSource | null = null;
let isReinitializing = false;

function initializeCallbackSource(): void {
  // Prevent concurrent reinitialization
  if (isReinitializing) {
    return;
  }
  isReinitializing = true;
  
  // Close existing EventSource if it exists
  if (callbackSource) {
    callbackSource.close();
    callbackSource = null;
  }
  
  // Initialize callback dispatcher with EventSource
  if (typeof EventSource !== 'undefined') {
    callbackSource = new EventSource(apiConfig.baseUrl + '/GIRest/callbacks');
    callbackSource.onmessage = (ev) => {
      try {
        const json = JSON.parse(ev.data);
        const cb = callbackDispatcher.get(json.id.toString());
        if (cb) {
          cb(...Object.values(json.data));
        }
      } catch (error) {
        console.error('Error processing callback:', error);
      }
    };
    callbackSource.onerror = (error) => {
      console.error('Callback EventSource error:', error);
    };
    callbackSource.onopen = () => {
      isReinitializing = false;
    };
  } else {
    isReinitializing = false;
  }
}

// Initialize on module load
initializeCallbackSource();

/**
 * Serialize a parameter value according to OpenAPI style and explode settings
 * @param value The value to serialize (can be object, array, or primitive)
 * @param style The serialization style ('simple', 'form', etc.)
 * @param explode Whether to use exploded format
 * @returns Serialized string value
 */
function serializeParam(value: any, style: string, explode: boolean): string {
  // Handle null/undefined
  if (value === null || value === undefined) {
    return String(value);
  }
  
  // Handle objects with ptr property (common in GIRest)
  if (typeof value === 'object' && !Array.isArray(value)) {
    if ('ptr' in value) {
      // For objects with ptr, serialize according to style/explode
      if (style === 'simple' || style === 'form') {
        if (explode) {
          // explode=true: ptr=value
          // For query params this will be handled by URLSearchParams
          // For path params, this format shouldn't be used (default is explode=false)
          return `ptr=${value.ptr}`;
        } else {
          // explode=false: ptr,value (comma-separated key-value pairs)
          return `ptr,${value.ptr}`;
        }
      }
    }
    // For other objects, serialize as JSON (fallback)
    return JSON.stringify(value);
  }
  
  // For arrays and primitives, use String conversion
  return String(value);
}
{% if interfaces %}

{{ interfaces | join('\n') }}
{% endif %}
{% if classes %}

{{ classes | join('\n') }}
{% endif %}
{% if standalone_namespace %}

{{ standalone_namespace }}
{% endif %}
