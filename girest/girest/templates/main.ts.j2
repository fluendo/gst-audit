{# Main TypeScript file template #}
/**
 * {{ title }}
 * Version: {{ version }}
 * Auto-generated by girest-ts
 */

{% if base_url %}
// FinalizationRegistry for automatic cleanup of GObject instances
const objectRegistry = new FinalizationRegistry((ptr: string) => {
  fetch('{{ base_url }}/GObject/Object/' + ptr + '/unref')
    .catch(err => console.error('Failed to unref object:', ptr, err));
});

// Base class for all GObject-based classes
class GObjectBase {
  ptr!: string;
  
  constructor(ptr?: string) {
    if (ptr) {
      this.ptr = ptr;
      objectRegistry.register(this, ptr);
    }
  }
  
  // Manual cleanup method
  unref(): Promise<void> {
    if (!this.ptr) return Promise.resolve();
    objectRegistry.unregister(this);
    return fetch('{{ base_url }}/GObject/Object/' + this.ptr + '/unref')
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      });
  }
}

{% endif %}
{% for interface in interfaces %}
{{ interface }}

{% endfor %}
{% for class_def in classes %}
{{ class_def }}

{% endfor %}
